@use "sass:map";
@use "../../mixins";

// Size and Shape
$button-sizes: (
  small: (
    width: (
      mobile: 20%,
      desktop: 3rem
    ),
    height: 1rem,
    font-size: 0.7rem,
    padding: 0.5rem,
  ),
  medium: (
    width: (
      mobile: 40%,
      desktop: 10rem
    ),
    height: 1.5rem,
    font-size: 0.85rem,
    padding: 0.75rem,
  ),
  large: (
    width: (
      mobile: 100%,
      desktop: 20rem
    ),
    height: 2rem,
    font-size: 1rem,
    padding: 1rem,
  ),
  square: (
    width: (
      mobile: 4rem,
      desktop: 4rem,
    ),
    height: 4rem,
    font-size: 0.8rem,
    padding: 0.5rem,
  ),
);

@mixin button-size-shape($size, $shape) {
  $size-map: map.get($button-sizes, $size);
  $height: map.get($size-map, height);

  width: map.get(map.get($size-map, width), mobile);
  height: $height;
  font-size: map.get($size-map, font-size);
  padding: map.get($size-map, padding);

  @if $shape == circle {
    border-radius: $height;
  } @else if $shape == rounded {
    border-radius: 0.5rem;
  } @else if $shape == squared {
    border-radius: 0;
  } @else if $shape == square {
    border-radius: 0;
    height: map.get(map.get($size-map, width), mobile) !important;
  }

  @include mixins.respond-to(desktop) {
    width: map.get(map.get($size-map, width), desktop);

    @if $shape == square {
      height: map.get(map.get($size-map, width), desktop);
    }
  }
}

$colors: (
  "red": (
    shade-0: color-mix(in srgb, var(--engineering-orange), white 90%),
    shade-1: color-mix(in srgb, var(--engineering-orange), white 80%),
    shade-5: color-mix(in srgb, var(--engineering-orange), white 50%),
    shade-9: color-mix(in srgb, var(--engineering-orange), black 50%),
  ),
  "blue": (
    shade-0: color-mix(in srgb, var(--azure), white 90%),
    shade-1: color-mix(in srgb, var(--azure), white 80%),
    shade-5: color-mix(in srgb, var(--azure), white 0%),
    shade-9: color-mix(in srgb, var(--azure), black 40%),
  ),
  "gray": (
    shade-0: color-mix(in srgb, var(--paynes-gray), white 90%),
    shade-1: color-mix(in srgb, var(--paynes-gray), white 80%),
    shade-5: color-mix(in srgb, var(--paynes-gray), white 0%),
    shade-9: color-mix(in srgb, var(--paynes-gray), black 40%),
  )
);

@mixin button-variant($style, $color, $hover: false, $disabled: false) {
  @if $disabled {
    cursor: not-allowed !important;
  }

  @if $style == filled {
    box-shadow: 0 3px 3px 0 rgba(0,0,0,0.2);

    @if $disabled {
      background-color: map.get(map.get($colors, $color), shade-0);
      border: none;
      color: map.get(map.get($colors, $color), shade-1);
    } @else if $hover {
      background-color: map.get(map.get($colors, $color), shade-9);
      border: none;
      color: map.get(map.get($colors, $color), shade-1);
    } @else {
      background-color: map.get(map.get($colors, $color), shade-1);
      border: none;
      color: map.get(map.get($colors, $color), shade-9);
    }
  } @else if $style == bordered {
    @if $disabled {
      background-color: white;
      border: 2px solid map.get(map.get($colors, $color), shade-1);
      color: map.get(map.get($colors, $color), shade-1);
      -webkit-box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), shade-1), 0 0 0.2rem map.get(map.get($colors, $color), shade-1);
      -moz-box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), shade-1), 0 0 0.2rem map.get(map.get($colors, $color), shade-1);
      box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), shade-1), 0 0 0.2rem map.get(map.get($colors, $color), shade-1);
    } @else if $hover {
      background-color: white;
      border: 2px solid map.get(map.get($colors, $color), shade-9);
      color: map.get(map.get($colors, $color), shade-9);
      -webkit-box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), shade-9), 0 0 0.2rem map.get(map.get($colors, $color), shade-9);
      -moz-box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), shade-9), 0 0 0.2rem map.get(map.get($colors, $color), shade-9);
      box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), shade-9), 0 0 0.2rem map.get(map.get($colors, $color), shade-9);
    } @else {
      background-color: white;
      border: 2px solid map.get(map.get($colors, $color), shade-5);
      color: map.get(map.get($colors, $color), shade-5);
      -webkit-box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), shade-5), 0 0 0.2rem map.get(map.get($colors, $color), shade-5);
      -moz-box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), shade-5), 0 0 0.2rem map.get(map.get($colors, $color), shade-5);
      box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), shade-5), 0 0 0.2rem map.get(map.get($colors, $color), shade-5);
    }
  } @else if $style == ghost {
    @if $disabled {
      background-color: transparent;
      border: none;
      color: map.get(map.get($colors, $color), shade-1);
    } @else if $hover {
      background-color: map.get(map.get($colors, $color), shade-1);
      border: none;
      color: map.get(map.get($colors, $color), shade-9);
    } @else {
      background-color: transparent;
      border: none;
      color: black;
    }
  }
}

.btn {
  transition-duration: 0.4s;
  cursor: pointer;

  // Size and Shape
  @each $size, $props in $button-sizes {
    &.#{$size}-circle {
      @include button-size-shape($size, circle);
    }
    &.#{$size}-rounded {
      @include button-size-shape($size, rounded);
    }
    &.#{$size}-squared {
      @include button-size-shape($size, squared);
    }
    &.#{$size}-square {
      @include button-size-shape(square, square);
    }
  }

  // Fill and Color
  @each $color, $props in $colors {
    &.filled-#{$color} {
      @include button-variant(filled, $color);
    }
    &.filled-#{$color}:hover {
      @include button-variant(filled, $color, true, false);
    }
    &.filled-#{$color}:disabled {
      @include button-variant(filled, $color, false, true);
    }
    &.bordered-#{$color} {
      @include button-variant(bordered, $color);
    }
    &.bordered-#{$color}:hover {
      @include button-variant(bordered, $color, true, false);
    }
    &.bordered-#{$color}:disabled {
      @include button-variant(bordered, $color, false, true);
    }
    &.ghost-#{$color} {
      @include button-variant(ghost, $color);
    }
    &.ghost-#{$color}:hover {
      @include button-variant(ghost, $color, true, false);
    }
    &.ghost-#{$color}:disabled {
      @include button-variant(ghost, $color, false, true);
    }
  }
}