@use "sass:map";
@use "../../colors" as *;

// Size and Shape
$button-sizes: (
  default: (
	width: fit-content,
  ),
  size0: (
	width: 2rem,
  ),
  size1: (
	width: 4rem,
  ),
  size2: (
	width: 6rem,
  ),
  size3: (
	width: 8rem,
  ),
  size4: (
	width: 10rem,
  ),
  size5: (
	width: 12rem,
  ),
  size6: (
	width: 14rem,
  ),
  size7: (
	width: 16rem,
  ),
  size8: (
	width: 18rem,
  ),
  size9: (
	width: 20rem,
  ),
);

@mixin button-variant($style, $color, $shade1, $shade2, $hover: false, $disabled: false, $selected: false) {
  border: none;

  @if $disabled {
	cursor: not-allowed !important;
  }

  @if $style == filled {
	box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.2);

	@if $disabled {
	  background-color: map.get(map.get($colors, $color), shade0);
	  color: map.get(map.get($colors, $color), shade1);
	} @else if $hover or $selected {
	  background-color: map.get(map.get($colors, $color), $shade2);
	  color: map.get(map.get($colors, $color), $shade1);
	} @else {
	  background-color: map.get(map.get($colors, $color), $shade1);
	  color: map.get(map.get($colors, $color), $shade2);
	}
  } @else if $style == bordered {
	@if $disabled {
	  background-color: white;
	  color: map.get(map.get($colors, $color), shade1);
	  -webkit-box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), shade1);
	  -moz-box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), shade1);
	  box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), shade1);
	} @else if $hover or $selected {
	  background-color: map.get(map.get($colors, $color), $shade1);
	  color: map.get(map.get($colors, $color), $shade2);
	  -webkit-box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), $shade2);
	  -moz-box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), $shade2);
	  box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), $shade2);
	} @else {
	  background-color: white;
	  color: map.get(map.get($colors, $color), $shade1);
	  -webkit-box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), $shade2);
	  -moz-box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), $shade2);
	  box-shadow: inset 0 0 0.4rem map.get(map.get($colors, $color), $shade1);
	}
  } @else if $style == ghost {
	@if $disabled {
	  background-color: transparent;
	  color: map.get(map.get($colors, $color), shade0);

	  @media (prefers-color-scheme: dark) {
		color: var(--light-night);
	  }
	} @else if $hover or $selected {
	  background-color: map.get(map.get($colors, $color), $shade1);
	  color: map.get(map.get($colors, $color), $shade2);
	} @else {
	  background-color: transparent;
	  color: black;

	  @media (prefers-color-scheme: dark) {
		color: white;
	  }
	}
  }
}

.btn {
  transition-duration: 0.4s;
  cursor: pointer;

  // Size
  @each $size, $props in $button-sizes {
	&.#{$size} {
	  width: map.get(map.get($button-sizes, $size), width);
	  max-width: 100%;
	  height: 2rem;
	  font-size: 1rem;
	  padding: 1rem;
	}
  }

  // Shape
  &.circle { border-radius: 2rem; }
  &.rounded { border-radius: 0.5rem; }
  &.squared { border-radius: 0; }
  &.square {
	border-radius: 0;
	height: auto;
	aspect-ratio: 1/1;
  }

  // Fill and Color
  @each $color, $shades in $colors {
	@each $shade1, $value in $shades {
	  @each $shade2, $value in $shades {
		&.filled-#{$color}-#{$shade1}-#{$shade2} {
		  @include button-variant(filled, $color, $shade1, $shade2, false, false, false);
		}
		&.filled-#{$color}-#{$shade1}-#{$shade2}:hover:not(:disabled) {
		  @include button-variant(filled, $color, $shade1, $shade2, true, false, false);
		}
		&.filled-#{$color}-#{$shade1}-#{$shade2}-selected {
		  @include button-variant(filled, $color, $shade1, $shade2, false, false, true);
		}
		&.filled-#{$color}-#{$shade1}-#{$shade2}:disabled {
		  @include button-variant(filled, $color, $shade1, $shade2, false, true, false);
		}


		&.bordered-#{$color}-#{$shade1}-#{$shade2} {
		  @include button-variant(bordered, $color, $shade1, $shade2, false, false, false);
		}
		&.bordered-#{$color}-#{$shade1}-#{$shade2}:hover:not(:disabled) {
		  @include button-variant(bordered, $color, $shade1, $shade2, true, false, false);
		}
		&.bordered-#{$color}-#{$shade1}-#{$shade2}-selected {
		  @include button-variant(bordered, $color, $shade1, $shade2, false, false, true);
		}
		&.bordered-#{$color}-#{$shade1}-#{$shade2}:disabled {
		  @include button-variant(bordered, $color, $shade1, $shade2, false, true, false);
		}

		&.ghost-#{$color}-#{$shade1}-#{$shade2} {
		  @include button-variant(ghost, $color, $shade1, $shade2, false, false, false);
		}
		&.ghost-#{$color}-#{$shade1}-#{$shade2}:hover:not(:disabled) {
		  @include button-variant(ghost, $color, $shade1, $shade2, true, false, false);
		}
		&.ghost-#{$color}-#{$shade1}-#{$shade2}-selected {
		  @include button-variant(ghost, $color, $shade1, $shade2, false, false, true);
		}
		&.ghost-#{$color}-#{$shade1}-#{$shade2}:disabled {
		  @include button-variant(ghost, $color, $shade1, $shade2, false, true, false);
		}
	  }
	}
  }
}